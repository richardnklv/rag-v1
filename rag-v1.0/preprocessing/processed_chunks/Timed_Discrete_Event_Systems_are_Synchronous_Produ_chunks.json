{
  "filename": "Timed_Discrete_Event_Systems_are_Synchronous_Produ.pdf",
  "text_length": 24853,
  "chunk_count": 9,
  "chunks": [
    "## Timed Discrete-Event Systems are Synchronous Product Structures\n\nLiyong Lin [∗]\n\n\n∗ Contemporary Amperex Technology Limited (e-mail:\nllin5@e ntu edu sg) Abstract: Timed discrete-event systems (TDES), which is a modelling formalism proposed by\nBrandin and Wonham, can be used for modelling scheduling and production planning problems This paper aims to show that TDES are essentially synchronous product structures The proof\nis constructive in the sense that a generalized synchronous product rule is provided to generate\na TDES from the activity automaton and the timer automata (that is, the syntactic description\nof the TDES) after some model transformation We then also explain how the generalized\nsynchronous product operation can be reduced into the standard synchronous product operation\nand how to reduce the number of (refined) events introduced in the model transformation Thus,\nany software that can compute synchronous products can be used to compute a TDES from its\nactivity automaton and its timer automata, after the model transformation Keywords: timed discrete-event systems, timed state-tree structures, synchronous product,\nsupervisory control\n\n\n\n1 INTRODUCTION\n\n\nThe theory of control for real-time discrete-event systems\nis a very rich subject that has been investigated in several different formalisms, e INTRODUCTION\n\n\nThe theory of control for real-time discrete-event systems\nis a very rich subject that has been investigated in several different formalisms, e g , the clock automata Brave\n\n[1988], the timed transition models Ostroff [1990], the\ntimed discrete-event systems Brandin [1994], with discrete time semantics, and the timed automata Toi [1991],\nwith dense time semantics One of the most widely used\nmodels of real-time discrete-event systems in supervisory\ncontrol theory is the timed discrete-event systems (TDES) TDES is attractive since many existing techniques for\nthe control of untimed discrete-event systems (DES) can\noften be naturally extended to this timed counterpart Indeed, a few number of structured supervisor synthesis approaches have been extended to the TDES formalism (e",
    "Indeed, a few number of structured supervisor synthesis approaches have been extended to the TDES formalism (e g Schafaschek [2017], Saadatpoor [2009]) Some recent extensions of Brandin [1994] include the supervisor localization Zhang [2013], Ostroff [2019], relative observability and\nrelative coobservability Cai [2016], networked supervisor\nsynthesis Zhang [2016], Rashidinejad [2018], Pruekprasert\n\n[2020], state-based control Rahnamoon [2018] and so on Quite a few number of practical applications have been\ndeveloped based on the framework of TDES (see, for example, Ware [2017], Zhao [2017], Monteiro [2017] for some\nrecent works) and interested reader may also see Seow\n\n[2020] for an envisioned application of control of TDES The modeling framework of Brandin [1994] starts with a\n(finite state) interval model, where each event is associated\nwith a fixed discrete time interval Then, the interval\nmodel has to be converted into a (finite state) tick model,\nwhich explicitly enumerates the tick events to model time\nintervals in the original model However, an inherent dif\n\n⋆ This work is financially supported by National Key R&D Program\nof China (Grant 2022YFB4702400) ficulty of TDES, compared with the untimed counterpart,\nis precisely due to the explicit enumeration of ticks that\nonly makes the state explosion problem much worse, especially when the intervals have large upper bounds [1] A\nsymbolic approach for the supervisory control of TDES has\nbeen successfully developed in Miremadi [2015], by using\nthe timed extended finite automata (TEFA) and binary\ndecision diagrams (BDD) An approach that attempts\nto avoid an explicit enumeration of ticks can be found\nin Lin [2019], Brandin [2020], which operates on interval\nautomata directly (by using interval arithmetic) for both\nsynchronous product construction and supervisor synthesis A timed state-tree structures (TSTS) based supervisor\nsynthesis framework has been developed in Saadatpoor\n\n[2009] to cope with the state explosion issue encountered\nin TDES, encouraged by the success of the (untimed)\nstate-tree structures based supervisor synthesis approach\nin Ma [2004] However, the TSTS framework developed\nin Saadatpoor [2009] seems far less successful, and only\ndeals with systems of state sizes of the order ≤ 10 [12],\neven if (the same) BDD based encoding of state trees is\nused We conjecture one of the main reasons behind this\nis because the modelling power of the state-tree structures\n(STS) formalism is not well utilized Indeed, Saadatpoor\n\n[2009] uses each (monolithic) TDES as a holon, instead\nof using the (constituent) activity automaton and the\ntimer automata as the holons Thus, state explosion has\nimplicitly occurred in the computation or model building\nof the TDES holons [2] 1 An interval model could have an unbounded “compression rate”\ncompared with the (flat) tick model Lin [2019] For example, to\nsimulate a transition in the interval model labeled by (σ, [1, k]), k\nticks-labeled transitions need to be created in the tick model 2 We shall remark that this is not the only reason, as an explicit\nenumeration of ticks still cannot be avoided in the timer automaton\n\nholons For example, if the intervals for events have large upper\n\n\nIn this paper, we shall show that this source of inefficiency\nof TSTS could be avoidable Indeed, the aim of this\npaper is to show that each TDES of Brandin [1994] is a\nsynchronous product structure, which can be built from\nthe activity automaton and the timer automata after\nsome model transformation; thus, it is possible for one\nto use the activity automaton and the timer automata,\ninstead of their product, that is, TDES, as the holons,\nwhich will hopefully help improve the efficiency of TSTS\nbased supervisor synthesis procedure by increasing the\nhorizontal modularity",
    "Indeed, the aim of this\npaper is to show that each TDES of Brandin [1994] is a\nsynchronous product structure, which can be built from\nthe activity automaton and the timer automata after\nsome model transformation; thus, it is possible for one\nto use the activity automaton and the timer automata,\ninstead of their product, that is, TDES, as the holons,\nwhich will hopefully help improve the efficiency of TSTS\nbased supervisor synthesis procedure by increasing the\nhorizontal modularity This result may be of independent\ninterest as well This result may be of independent\ninterest as well We remark that, before this work, it is\nan open problem, to the best of our knowledge, whether\na TDES can be built from its activity automaton and\ntimer automata Brandin [1994] Indeed, it is stated in\nthe second paragraph of Section V in Brandin [1994] that\n“Unfortunately there is no simple way to obtain G by\nstraightforward combination of G act with the SPECσ” Indeed, it is stated in\nthe second paragraph of Section V in Brandin [1994] that\n“Unfortunately there is no simple way to obtain G by\nstraightforward combination of G act with the SPECσ” The paper is organized as follows In Section 2, we review\nthe basics of TDES In Section 3, we show the main result\nthat TDES are synchronous product structures Finally,\nwe provide conclusion and future works in Section 4 2 BASICS OF TIMED DISCRETE-EVENT SYSTEMS\n\n\nIn this section, we shall present some basics of the TDES\nformalism Brandin [1994], Wonham [2021] to make this\npaper more self-contained To that end, we need to first\nrecall some general notation and terminology Let N denote the set {0, 1, 2, 3, } of natural numbers We write [k 1, k 2 ], where k 1, k 2 ∈ N and k 1 ≤ k 2, to denote\nthe set {k ∈ N | k 1 ≤ k ≤ k 2 }, and write [k 1, ∞) to denote\nthe set {k ∈ N | k ≥ k 1 } Let I denote the collection of\nintervals of the above two types, and let I f ⊂ I denote\nthe collection of intervals of the first type For any interval\nI, we define I l = k 1, I r := k 2 if I = [k 1, k 2 ]; we define\nI l := k 1, I r := ∞ if I = [k 1, ∞) For brevity, we use “t”,\ninstead of “tick”, to denote the tick event 2 1 Syntax\n\n\nThe syntax of a TDES is given by a tuple (G act, T ), where\n\n\nG act = (A, Σ act, δ act, a 0, A m )\n\n\nis a finite state automaton (over Σ act ) and T : Σ act �→I\nmaps each σ ∈ Σ act to an interval T (σ) ∈I G act is the\nactivity automaton, where A is the finite set of activities;\nΣ act is the finite set of (activity) events; δ act : A×Σ act �→ A\nis the (partial) activity transition function [3] ; a 0 ∈ A is the\ninitial activity and A m ⊆ A the subset of marker activities T is the timer map which naturally induces a partition of\nthe event set Σ act = Σ spe ∪ [˙] Σ rem, where [4] σ ∈ Σ spe if and\nonly if T (σ) ∈I f bounds, then each timer automaton holon can have a large state\n\nsize 3 We also write δ act ⊆ A × Σ act × A As usual, we can extend δ act\nto the partial function δ act : A × Σ [∗] act [�→] [A][ ]\n4 The subscript “spe” denotes “prospective”, while “rem” denotes\n“remote” � σ∈Σ act [T] [σ] [ or][ Q] [m] [ =][ A] [m] [ ×] [ �] σ∈Σ act [{][t] [σ][0] [}][ The second option is]\n\nadopted in this work, without loss of generality, as the marker states\nset can be easily adapted accordingly 2\n\n\n\n2 2 Semantics\n\n\nRecall that the semantics of the tuple (G act, T ) is a finite\nstate automaton G = (Q, Σ, δ, q 0, Q m ) over Σ := Σ act ∪{ [˙] t},\noften referred to as a timed discrete-event system (TDES) In the rest of this subsection, we shall explain how the four\ncomponents Q, δ, q 0 and Q m are generated from the tuple\n(G act, T ) For an informal description of the semantics, the\nreader is referred to Brandin [1994] A timer interval T σ is defined for each event σ as follows:\n\nT σ := �[0[0, T, T ( (σσ)) r l]],, ifif σ σ ∈ ∈ ΣΣ sperem\n\nwithout loss of generality we arbitrarily fix an ordering inThe state set is defined to be Q := A × [�] σ∈Σ act [T] [σ] [, where]\nthe enumeration of Σ act in the Cartesian product A state\nis a tuple of the form q = (a, (t σ ) σ∈Σ act ), where a ∈ A and,\nfor each σ ∈ Σ act, t σ ∈ T σ The t σ component of q is the\ntimer value of σ in q The default timer value t σ0 for each\nσ ∈ Σ act is defined as follows:\n\nt σ0 := T (σ) r, if σ ∈ Σ spe\n�T (σ) l, if σ ∈ Σ rem\n\nThe initial state is q 0 = (a 0, (t σ0 ) σ∈Σ act ) And, the set of\nmarker states is defined to be [5] Q m = A m × [�] σ∈Σ act [{][t] [σ][0] [}][ ]\n\nThe definition of the partial transition function δ is more\ntedious Let q = (a, (t σ ) σ∈Σ act ) and q [′] = (a [′], (t [′] σ [)] [σ][∈][Σ] act [)]\nbe any two states We have the following three cases:\n\n\nA) for any σ ∈ Σ spe, δ(q, σ) = q [′] if and only if\n(a) δ act (a, σ) and 0 ≤ t σ ≤ T (σ) r − T (σ) l\n(b) a [′] = δ act (a, σ) and for each τ ∈ Σ act,\n(i) if τ ̸= σ, then\n\n\nt τ 0, if ¬δ act (a [′], τ ) t [′] τ [:=] �t τ, if δ act (a [′], τ ) (ii) if τ = σ, then t [′] τ [=][ t] [σ][0]\nB) for any σ ∈ Σ rem, δ(q, σ) = q [′] if and only if\n(a) δ act (a, σ) and t σ = 0\n(b) a [′] = δ act (a, σ) and for each τ ∈ Σ act,\n(i) if τ ̸= σ, then\n\n\nt τ 0, if ¬δ act (a [′], τ ) t [′] τ [:=] �t τ, if δ act (a [′], τ ) (ii) if τ = σ, then t [′] τ [=][ t] [σ][0]\nC) δ(q, t) = q [′] if and only if\n(a) ∀τ ∈ Σ spe, (δ act (a, τ ) =⇒ t τ   - 0)\n(b) a [′] = a and for each τ ∈ Σ act,\n(i) if τ ∈ Σ spe, then\n\n\nt τ 0, if ¬δ act (a, τ ) t [′] τ [:=] �t τ − 1, if δ act (a, τ ) ∧ t τ           - 0\n\n\n(ii) if τ ∈ Σ rem, then\n\n\n\nt τ 0, if ¬δ act (a, τ ) t τ − 1, if δ act (a, τ ) ∧ t τ - 0\n0, if δ act (a, τ ) ∧ t τ = 0\n\n\n\nt [′] τ [:=]\n\n\n\n\n\n\n\n\n\n\n5 In Brandin [1994], it is only required there that Q m ⊆ A m ×\n� σ∈Σ act [T] [σ] [ The software TTCT provides two options:][ Q] [m] [ =][ A] [m] [×]\n\n� Σ [T] [σ] [ or][ Q] [m] [ =][ A] [m] [ ×] [ �] Σ [{][t] [σ][0] [}][ The second option is]\n\n\n\nσ∈Σ act [T] [σ] [ or][ Q] [m] [ =][ A] [m] [ ×] [ �]\n\n\nWe have now completed the description of the semantics\nof the tuple (G act, T ) as a timed discrete-event system G We finally remark that it is required that all TDES must\nbe activity-loop-free, namely, ∀q ∈ Q, s ∈ Σ [+] act [, δ][(][q, s][)][ ̸][=][ q][ ]\n\n\n3",
    "]\n\n\n3 TDES ARE SYNCHRONOUS PRODUCT\n\nSTRUCTURES\n\n\nWe note that the description of the semantics of (G act, T )\nin Section 2 2 is a bit involved and may even be difficult to\nvisualize (for beginners) 2 is a bit involved and may even be difficult to\nvisualize (for beginners) While all the other components of\nG suggest that G could be a synchronous product structure\n(for example, the state space Q is a Cartesian product), the\ndefinition of δ is not presented in an explicitly structured\nmanner nor is it clear that δ has a product structure;\nand, it is difficult to obtain much insight from the definition of δ A structured construction of G by combining [6] G act and T is an open problem that still remains\nnot addressed Brandin [1994] In the following, we show\nthat a generalized synchronous product operation for the\nconstruction of a TDES from its activity automaton and\ntimer map description, after some model transformation, is\nfeasible Later, we also show how the generalized product\noperation can be mapped into the standard synchronous\nproduct operation Furthermore, we will show that the\nsynchronous product based construction exactly matches\nthe construction provided in Section 2 2 The overall construction consists of four steps; the details\nwill be explained in the rest of this section 3 1 Step 1: Timer Map to Timer Automata\n\n\nIn order for the synchronous product to be computed, the\nfirst step is to transform the timer map to a collection of\ntimer automata For each pair (σ, T (σ)), we shall define a\ntimer automaton G σ = (Q σ, Σ σ, δ σ, q 0,σ, Q m,σ ) Before we\nprovide the formal definition of G σ, we shall use the next\nexample as an illustration The formal construction is as follows 1) If σ ∈ Σ spe, then we let Q σ = [0, T (σ) r], Σ σ = {t, σ},\nq 0,σ = T (σ) r and Q m,σ = {T (σ) r} δ σ is specified by its\ngraph [7], which is the union of {(i +1, t, i) | i ∈ [0, T (σ) r −\n1]} and {(i, σ, T (σ) r) | i ∈ [0, T (σ) r − T (σ) l]} 2) If σ ∈ Σ rem, then we let Q σ = [0, T (σ) l], Σ σ = {t, σ},\nq 0,σ = T (σ) l and Q m,σ = {T (σ) l} δ σ is specified by its\ngraph, which is the union of {(i+1, t, i) | i ∈ [0, T (σ) l−1]}\nand {(0, σ, T (σ) l), (0, t, 0)} Each timer automaton G σ constructed above corresponds\nto the specification SPECσ over {t, σ} in Section V\nof Brandin [1994] Despite of the fact that the timer automata have already been constructed in Brandin [1994],\nit is not known whether and how they could be used in\nthe computation of G in Brandin [1994] In the following\nsubsections, we provide the remaining three steps to complete the construction of G by using a synchronous product\noperation, after some model transformation 6 T is only a timer map here; thus, it is expected that we need to\ntransform T into some automata The details will be presented soon 7 The graph of a partial function f with domain Dom is the relation\n{(x, f (x)) | x ∈ Dom} 3 2 Step 2: Automata Transformation\n\n\nThe automata (G act, (G σ ) σ∈Σ act ) cannot be used for synchronous product The main idea to resolve the difficulties\nis to 1) add labels to tick transitions and event transitions in the activity automaton to reflect, respectively, the\nstatus of enablement of events and the effect of event transitions on the enablement of events, and 2) split and add\nlabels to tick transitions and event transitions in the timer\nautomata to reflect the effects of different transitions [8] Let Σ act = {σ 1, σ 2, , σ n }",
    ", σ n } The transformation can then\nbe summarized as follows:\n\n[Computing Transformed Activity Automaton]:\nGiven G act (before adding the self-loops), we perform the\nfollowing operations (1) for each state a ∈ A in G act, add a self-loop labeled\nby (t, ph 1, ph 2, , ph n ), where ph i is a place holder\nthat is to be replaced by σ i if σ i is defined at state\na, and replaced by ¬σ i if σ i is not defined at state a (2) for each transition (a, σ, a [′] ), where σ ∈ Σ act, replace it\nwith the transition (a, (σ, ph [′] 1 [, ph] [′] 2 [, , ph] n [′] [)][, a] [′] [), i e ,]\nadd the label (ph [′] 1 [, ph] [′] 2 [, , ph] [′] n [) to][ σ][ in the transition]\n(a, σ, a [′] ) Here, ph [′] i [is a place holder that is to be]\nreplaced by Eσ i if σ i is defined at state a [′], and\nreplaced by Dσ i if σ i is not defined at state a [′] Intuitively, the meaning of (t, α , ¬β ) at state 0 ∈ A is\nthat α is enabled and β is disabled at state 0 ∈ A The\nmeaning of the transition (0, (α, Dα, Eβ), 1) is that after\nfiring event α at state 0, α is disabled and β is enabled\n(in the next state) The other cases can be explained in a\nsimilar way We shall use the next example to illustrate the transformation procedure for the timer automata The transformation can be summarized as follows:\n\n[Computing Transformed Timer Automaton]:\nGiven G σ (before adding the self-loops), we perform the\nfollowing operations Recall that\n\n\nt σ0 := T (σ) r if σ ∈ Σ spe\n�T (σ) l if σ ∈ Σ rem\n\n\nis the initial state of G σ (1) for each state i ∈ Q σ and each event σ [′] ∈ Σ act other\nthan σ, add the transition (i, (σ [′], Eσ), i), i e , add a\nself-loop labeled by (σ [′], Eσ), and add the transition\n(i, (σ [′], Dσ), t σ0 ) (2) for each transition (i, σ, t σ0 ), replace it with the two\ntransitions (i, (σ, Eσ), t σ0 ) and (i, (σ, Dσ), t σ0 ) (3) for each transition labeled by t, replace the label with\n(t, σ ) (4) for the state t σ0 ∈ Q σ, add the transition (t σ0, (t, ¬σ ),\nt σ0 ), i e , add a self-loop labeled by (t, ¬σ )",
    ") Intuitively, labels are added to reflect the effects of different transitions to the timer value for each timer automaton In the above procedure, we split tick transitions and\nevent transitions for exactly that purpose 8 Here, event transitions refer to those transitions labeled by events\nin Σ act 3\n\n\n3 3 Step 3: Generalized Synchronous Product\n\n\nUp to now, we have completed the transformation of the\nactivity automaton and the timer automata It is straightforward to define a generalized synchronous product operation that combines the transformed activity automaton\nand the transformed timer automata The synchronization\nconstructs are shown in the following (1) for event (t, ph 1, ph 2, , ph n ) in the transformed\nactivity automaton, it can be synchronized with event\n(t, ph i ) in the transformed timer automaton for σ i, for\ni ∈ [1, n], where ph i is a place holder for σ i or ¬σ i ;\nafter the synchronization, the label is event t\n(2) for event (σ, ph [′] 1 [, ph] [′] 2 [, , ph] [′] n [) in the transformed]\nactivity automaton, where σ ∈ Σ act, it can be synchronized with event (σ, ph [′] i [) in the transformed timer]\nautomaton for σ i, for i ∈ [1, n], where ph [′] i [is a place]\nholder for Eσ i or Dσ i ; after the synchronization, the\nlabel is event σ\n\n\nLet G [T] act [denote the transformed activity automaton and]\nG [T] σ [the transformed timer automaton for][ σ][ ∈] [Σ] [act] [ If]\nwe use ⊲⊳ to denote the generalized synchronous product\noperation, then G [T] act [⊲⊳] [(][⊲⊳] [σ][∈][Σ] act [G] [T] σ [) can be constructed]\nusing the above synchronization constructs 3 4 Step 4: Generalized Synchronous Product to Standard\nSynchronous Product\n\n\nTo map the generalized synchronous product operation ⊲⊳\ninto the standard synchronous product operation ∥, the\nlast step involves straightforward relabelling for each timer\nautomaton Thus, for each timer automaton, we perform\nthe following (1) replace each transition that is labeled with (σ, ph i )\nwith the set of transitions labeled with\n{(σ, ph 1, , ph i−1, ph i, ph n ) | ph j = Eσ j ∨\n\nph j = Dσ j, j ∈ [1, n] −{i}}\n(2) replace each transition that is labeled with (t, ph i )\nwith the set of transitions labeled with\n{(t, ph 1, , ph i−1, ph i, ph n ) | ph j = σ j ∨\n\nph j = ¬σ j , j ∈ [1, n] −{i}}\n\n\nLet R(G [T] σ [) denote the relabelled transformed timer au-]\ntomaton, for each σ ∈ Σ Then, we can obtain the\nsynchronous product G [T] act [∥][(][∥] [σ][∈][Σ] act [R][(][G] [T] σ [)) Each event of]\nG [T] act [∥][(][∥] [σ][∈][Σ] act [R][(][G] [T] σ [)) is of the form (][σ, ph] [1] [, ph] [2] [, , ph] [n] [)]\nor (t, ph [′] 1 [, ph] [′] 2 [, , ph] [′] n [), which contains refined event in-]\nformation It is straightforward to recover the original event information by hiding the placeholder information, by replacing (σ, ph 1, ph 2, , ph n ) with σ and\n(t, ph [′] 1 [, ph] [′] 2 [, , ph] [′] n [) with][ t][ We denote the resulting finite]\nstate automaton h(G [T] act [∥][(][∥] [σ][∈][Σ] act [R][(][G] [T] σ [))) ]\n\n\nIt appears that an exponential number of events need to\nbe created for the model transformation, to be used in\nthe synchronous product constructions This can be easily\navoided by relabeling the events in G act first Then, one\nonly need to transform each G σ with the events used in\nG [T] act [ Thus, the number of events used is upper bounded]\nby the number of transitions of G act 4 CONCLUSIONS AND FUTURE WORK\n\n\nIn this work, we have shown that TDES are synchronous\nproduct structures, thus resolving a problem from Brandin\n\n[1994] that has been unaddressed",
    "CONCLUSIONS AND FUTURE WORK\n\n\nIn this work, we have shown that TDES are synchronous\nproduct structures, thus resolving a problem from Brandin\n\n[1994] that has been unaddressed Moreover, the technique\npresented in this work opens up some new directions\nfor future research An interesting question is whether a\nmodular presentation of TDES can already be useful for\nthe modular control This work can be viewed as reducing\nthe semantic interpretation of TDES into the computation\nof the synchronous products We will present a sequel of\nthis work ”Reduction for Time Discrete-Event Systems II:\nFrom Untimed Synthesis to Timed Synthesis and Back”\nin a companion paper, and present the application of control Brandin [2020],Zhu [2020],Brandin [2024] for scheduling and production planning We will present a sequel of\nthis work ”Reduction for Time Discrete-Event Systems II:\nFrom Untimed Synthesis to Timed Synthesis and Back”\nin a companion paper, and present the application of control Brandin [2020],Zhu [2020],Brandin [2024] for scheduling and production planning Acknowledgement The first author would like to thank\nSadegh Rahnamoon and Prof Wonham for commenting\non an earlier version of this paper REFERENCES\n\n\nY Brave, M Heymann “Formulation and control of real\ntime discrete event processes”, CDC, pp “Formulation and control of real\ntime discrete event processes”, CDC, pp 1131–1132,\n1988 J S Ostroff “A framework for real-time discrete-event\ncontrol”, IEEE Transactions on Automatic Control,\n35(4): 386-397, 1990 “A framework for real-time discrete-event\ncontrol”, IEEE Transactions on Automatic Control,\n35(4): 386-397, 1990 B A Brandin, W M Wonham “Supervisory control of\ntimed discrete-event systems”, IEEE Transactions on\nAutomatic Control, 39(2): 329-342, 1994 H Wong-Toi, G Hoffmann “The control of dense realtime discrete event systems”, Proceedings of the 30th\nIEEE Conference on Decision and Control, 1527-1528,\n1991 G Schafaschek, M H de Queiroz, J E R Cury",
    "Cury “Local\nmodular supervisory control of timed discrete-event\nsystems”, IEEE Transactions on Automatic Control,\n62(2): 934-940, 2017 Ali Saadatpoor Ali Saadatpoor Timed state tree structures: supervisory\ncontrol and fault diagnosis, PhD Thesis, University of\nToronto, Toronto, Canada, 2009 R Zhang, K Cai, Y Gan, Z Wang, W M Wonham “Supervision localization of timed discrete-event systems”,\nAutomatica, 49(9): 2786-2794, 2013 R Zhang, K Cai “Supervisor localization of timed\ndiscrete-event systems under partial observation”,\nIEEE Transactions on Automatic Control, DOI:\n10 1109/TAC 2019 2912008, 2019 K Cai, R Zhang, W M Wonham Wonham “Relative observability\nand coobservability of timed discrete-event systems”,\nIEEE Transactions on Automatic Control, 61(11): 33823395, 2016 “Relative observability\nand coobservability of timed discrete-event systems”,\nIEEE Transactions on Automatic Control, 61(11): 33823395, 2016 R Zhang, K Cai, Y Gan, W M Wonham “Delayrobustness in distributed control of timed discrete-event\nsystems based on supervisor localization”, International\nJournal of Control, 89(10): 2055-2072, 2016 A Rashidinejad, M Reniers, L Feng Feng “Supervisory control\nof timed discrete-event systems subject to communication delays and non-FIFO observations”, Workshop on\nDiscrete Event Systems, pp “Supervisory control\nof timed discrete-event systems subject to communication delays and non-FIFO observations”, Workshop on\nDiscrete Event Systems, pp 456-463, Sorrento, 2018 S Pruekprasert, T Ushio Ushio “Supervisory control of communicating timed discrete event systems for state avoidance\n4\n\n\nproblem”, IEEE Control Systems Letters,4(1):259-264,\n2020 S Rahnamoon, W M Wonham “State-based control\nof timed discrete-event systems”, In Proc 2018 IEEE\nConference on Decision and Control, pp 4833-4838,\nMiami, 2018 S Ware, R Su",
    "Su “Time optimal synthesis based upon\nsequential abstraction and its application in cluster\ntools”, IEEE Transactions on Automation Science and\nEngineering, 14(2):772-784, 2017 B Zhao, F Lin, C Wang, X Zhang, M P Polis, L Y Wang “Supervisory control of networked timed discrete\nevent systems and its applications to power distribution\nnetworks”, IEEE Transactions on Control of Network\nSystems, 4(2):146-158, 2017 T Monteiro Tuxi, A Carrilho da Cunha, “Timed supervisory control of an industrial glass bonding system”,\n50(1): 12339-12344, 2017 Carrilho da Cunha, “Timed supervisory control of an industrial glass bonding system”,\n50(1): 12339-12344, 2017 K T Seow, Supervisory control of blockchain networks,\nIEEE Transactions on Systems, Man, and Cybernetics:\nSystems, 50(1): 159-171, 2020 Seow, Supervisory control of blockchain networks,\nIEEE Transactions on Systems, Man, and Cybernetics:\nSystems, 50(1): 159-171, 2020 L Lin, R Su, B A Brandin, S Ware, Y Zhu, Y Sun Sun “Synchronous composition of finite interval automata”,\nIEEE International Conference on Control and Automation, pp 578-583, 2019 S Miremadi, Z Fei, K [˚] Akesson, B [˚] Akesson, B Lennartson, “Symbolic Supervisory Control of Timed Discrete Event Systems”, IEEE Transactions on Control Systems Technology, 584-597, 2015 C Ma, W M Wonham Nonblocking supervisory control\nof state tree structures, Springer, 2004 W M Wonham, K Cai Supervisory control of discreteevent systems, Springer, 2021 B A Brandin, R Su, L Lin “Supervisory control of\ntime-interval discrete-event systems”, Workshop on Discrete Event Systems, IFAC-PapersOnline 53(4), 217222, 2020 “Supervisory control of\ntime-interval discrete-event systems”, Workshop on Discrete Event Systems, IFAC-PapersOnline 53(4), 217222, 2020 Y Zhu, L Lin, R Tai, R Su Su “ Distributed Control\nof Timed Networked System against Communication\nDelays”, ICCA, 1008-1013, 2022 “ Distributed Control\nof Timed Networked System against Communication\nDelays”, ICCA, 1008-1013, 2022 B A Brandin, R Su, L Lin: “Supervisory Control of\nTime-Interval Discrete Event Systems”, IEEE Trans Autom Control, 69(5): 3080-3095, 2024 5"
  ]
}