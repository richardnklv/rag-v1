{
  "filename": "WebotsTM__Professional_Mobile_Robot_Simulation.pdf",
  "text_length": 15143,
  "chunk_count": 8,
  "chunks": [
    "_Olivier, M _Olivier, M / Cyberbotics Ltd - WebotsTM: Professional Mobile Robot Simulation, pp 40-43, Inernational Journal of_\n_Advanced Robotic Systems, Volume 1 Number 1 (2004), ISSN 1729-8806_\n\n# **Cyberbotics Ltd ** **Webots [TM] : Professional Mobile Robot Simulation**\n\n\n**Olivier Michel**\n\nCyberbotics Ltd ,\nSwiss Federal Institute of Technology in Lausanne, BIRG & SWIS research groups,\nOlivier Michel@cyberbotics com\n\n\n_**Abstract:**_ _Cyberbotics Ltd develops Webots_ _[TM]_ _, a mobile robotics simulation software that provides you with a rapid_\n_prototyping environment for modelling, programming and simulating mobile robots The provided robot libraries_\n_enable you to transfer your control programs to several commercially available real mobile robots Webots_ _[TM]_ _lets you_\n_define and modify a complete mobile robotics setup, even several different robots sharing the same environment For_\n_each object, you can define a number of properties, such as shape, color, texture, mass, friction, etc You can equip_\n_each robot with a large number of available sensors and actuators You can program these robots using your favorite_\n_development environment, simulate them and optionally transfer the resulting programs onto your real robots _\n_Webots_ _[TM]_ _has been developed in collaboration with the Swiss Federal Institute of Technology in Lausanne, thoroughly_\n_tested, well documented and continuously maintained for over 7 years It is now the main commercial product available_\n_from Cyberbotics Ltd _\n_**Keywords:**_ _Webots_ _[TM]_ _, mobile robot simulation, rapid prototyping, transfer to real robots, commercial software_\n\n\n\n**1 ** **Introduction**\n\nCyberbotics Ltd was founded in 1998 as a spin-off\ncompany from the Swiss Federal Institute of Technology\nin Lausanne (EPFL) It currently employs two people and\ndevelops Webots [TM] : a commercial software used for\nmobile robotics prototyping simulation and transfer to\nreal robots (see Fig 1)",
    "1) In 1998 and 1999 Cyberbotics\ndeveloped an Aibo [®] simulator for Sony Ltd Cyberbotics\nhas now collaborations with the Biologically Inspired\nRobotics Group (BIRG) and the Swarm Intelligent\nSystem Research Group (SWIS) of the EPFL through the\nSwiss CTI technology transfer program Webots [TM] runs on Windows, Linux and Mac OS X and is\nintended for researchers and teachers interested in mobile\n\nrobotics It is commercially available from Cyberbotics\nLtd (http://www cyberbotics com) **2 ** **Need for Simulation**\n\nAlthough the final aim is real robotics, it is often very\nuseful to perform simulations prior to investigations with\nreal robots This is because simulations are easier to\nsetup, less expensive, faster and more convenient to use Building up new robot models and setting up\n\n\n\nFig 1 1 Stages of development of a robot simulation\n\n\nexperiments only takes a few hours A simulated robotics\nsetup is less expensive than real robots and real world\nsetups,thus allowing a better design exploration Simulation often runs faster than real robots while all the\n\nparameters are easildisplayed on screen Simulations\n\n\n39\n\n\nmake it possible to use computer expensive algorithms\nthat would need ages to run on real robot microcontrollers, like genetic algorithms Finally, the\nsimulation results are transferable onto the real robots Finally, the\nsimulation results are transferable onto the real robots **3 **3 ** **Features**\n\nWebots [TM] has a number of essential features intended to\n\nmake this simulation tool both easy to use and powerful:\n\n- Models and simulates any mobile robot, including\nwheeled, legged and flying robots - Includes a complete library of sensors and actuators - Lets you program the robots in C, C++ and Java, or\nfrom third party software through TCP/IP - Transfers controllers to real mobile robots, including\nAibo®, Lego® Mindstorms®, Khepera®, Koala®\nand Hemisson® - Uses the ODE (Open Dynamics Engine) library for\naccurate physics simulation - Creates AVI or MPEG simulation movies for web\n\nand public presentations - Includes many examples with controller source code\nand models of commercially available robots - Lets you simulate multi-agent systems, with global\nand local communication facilities **4",
    "**4 ** **Robot and world editor**\n\nA library of sensors is provided so that you can plug a\nsensor in your robot model and tune it individually\n(range, noise, response, field of view, etc ) This sensor\nlibrary includes distance sensors (infra-red and ultrasonic), range finders, light sensors, touch sensors, global\npositioning sensor (GPS), inclinometers, compass,\ncameras (1D, 2D, color, black and white), receivers\n(radio and infra-red), position sensors for servos,\nincremental encoders for wheels Similarly, an actuator library is provided It includes\ndifferential wheel motor unit, independent wheel motors,\n\n\n\nFig 3 3 Humanoid robot modelling using physics\n\n\n\nservos (for legs, arms, etc ), LEDs, emitters (radio and\n\nand models of commercially available robots - Lets you simulate multi-agent systems, with global infra-red) and grippers With Webots [TM], you can create complex environments\n\nand local communication facilities for your mobile robot simulations, using advanced\nhardware accelerated OpenGL technologies, including\n\n**4 ** **Robot and world editor**\n\nlighting, smooth shading, texture mapping, fog, etc Moreover, Webots [TM] allows you to import 3D models in\n\nA library of sensors is provided so that you can plug a\n\nits scene tree (see Fig 2) from most 3D modelling\n\nsensor in your robot model and tune it individually\n\nsoftware through the VRML97 standard (range, noise, response, field of view, etc ) ) This sensor\n\nYou can create worlds as large as you need and\n\nlibrary includes distance sensors (infra-red and ultra\nWebots [TM] will optimize them to enable fast simulations sonic), range finders, light sensors, touch sensors, global\n\nComplex robots can be built by assembling chains of\n\npositioning sensor (GPS), inclinometers, compass,\n\nservo nodes This allows you to easily create legged\n\ncameras (1D, 2D, color, black and white), receivers\n\nrobots with several joints per leg (as shown in Fig 3),\n\n(radio and infra-red), position sensors for servos,\n\nrobot arms, pan / tilt camera systems, etc For example,\n\nincremental encoders for wheels you can place several cameras on the same robot to\n\nSimilarly, an actuator library is provided It includes\n\nperform binocular stereo vision, or 360 degree vision\n\ndifferential wheel motor unit, independent wheel motors,\n\nsystems",
    "It includes\n\nperform binocular stereo vision, or 360 degree vision\n\ndifferential wheel motor unit, independent wheel motors,\n\nsystems **5 **5 ** **Realistic Simulation**\n\nThe simulation system used in Webots [TM] uses virtual\ntime, making it possible to run simulations much faster\nthan it would take on a real robot Depending on the\ncomplexity of the setup and the power of your computer,\nsimulations can run up to 300 times faster than the real\nrobot when using the fast simulation mode The basic simulation time step can be adjusted to suit\nyour needs (precision versus speed) A step-by-step\nmode is available to study in detail how your robots\nbehave\n\nSimulating complex robotic devices including articulated\nmechanical parts requires precise physics simulation Webots [TM] relies on ODE (Open Dynamics Engine) to\nperform accurate physics simulation wherever it is\n\nnecessar y\nFor each component of a robot, you can specify a mass\ndistribution matrix (or use primitives for simple\nFig Webots [TM] relies on ODE (Open Dynamics Engine) to\nperform accurate physics simulation wherever it is\n\nnecessar y\nFor each component of a robot, you can specify a mass\ndistribution matrix (or use primitives for simple\nFig 2 Scene tree editor window geometries), static and kinematic friction coefficients,\n\n\n\n40\n\n\nbounciness, etc Moreover each component is associated\nwith a bounding object used for collision detection Servo devices can be controlled by your program in\ntorque, position or velocity The control parameters for\nthe servo can be individually adjusted from your\ncontroller program The graphical user interface of Webots [TM] allows you to\neasily interact with the simulation while it is running By\ndragging the mouse, you can change the viewpoint\nposition, orientation and zoom using the mouse wheel Pressing the shift key while dragging the mouse allows\nyou to move or rotate objects This feature facilitates\ninteractive testing",
    "This feature facilitates\ninteractive testing **6 ** **Programming Interface**\n\nProgramming your robot using the C language is as\nsimple as shown in Fig 4 In this example, the robot is a differential wheeled robot\nequipped with an infra-red distance sensor named “ir”\nlooking forward The robot will stop moving if the\ndistance sensor detects an obstacle and restart moving\nwhen the obstacle is no longer detected The robot will stop moving if the\ndistance sensor detects an obstacle and restart moving\nwhen the obstacle is no longer detected A similar Java programming interface is also included Moreover, any Webots [TM] controller can be connected to\na third party software program, such as MatLab®,\nLabView®, Lisp®, etc through a TCP/IP interface Research experiments often need to interact\nautomatically with the simulation The supervisor\ncapability allows you to write a program responsible for\nsupervising the experiment Such a program can\ndynamically move objects, send messages to robots,\nrecord robot trajectories, add new objects or robots, etc The supervisor capability can be used in computationally\nexpensive simulations where a large number of robot\nconfigurations and control parameters have to be\nevaluated, as in genetic evolution, neural networking,\nmachine learning, etc #include <robot h>\n\n#include <differential_wheels h>\n#include <distance_sensor h>\n\nDeviceTag ir;\n\nvoid my_robot_reset() {\nir = robot_get_device(“ir”);\n}\n\nvoid main() {\nrobot_live(my_robot_reset);\nfor(;;) { /* infinite loop */\nif (distance_sensor_get_value(ir)>100)\ndifferential_wheels_set_speed(0,0);\nelse\ndifferential_wheels_set_speed(10,10);\nrobot_step(64) /* run for 64 ms */\n}\n}\n\n\nFig 4 Programming a robot with the C interface\n\n\n\nFig 5",
    "5 Aibo ERS-210 robot with transfer capability\n\n\nFig Aibo ERS-210 robot with transfer capability\n\n\nFig 6 Control for a real and simulated Khepera robot\n\n\n**7 ** **Transfer to real robots**\n\nOnce tested in simulation your robot controllers can be\ntransferred to real robots:\n\n- Khepera® and Koala®: cross-compilation of C\nWebots [TM] controllers and remote control with any\nprogramming language (see Fig ** **Transfer to real robots**\n\nOnce tested in simulation your robot controllers can be\ntransferred to real robots:\n\n- Khepera® and Koala®: cross-compilation of C\nWebots [TM] controllers and remote control with any\nprogramming language (see Fig 6) - Hemisson®: Finite state automata graphical\nprogramming with remote control and autonomous\nexecution modes - LEGO® Mindstorms®: cross-compilation for RCX\nof Java Webots [TM] controllers based on LeJOS - Aibo®: cross-compilation of C/C++ Webots [TM]\ncontroller programs based on the Open-R SDK (see\nFig - Aibo®: cross-compilation of C/C++ Webots [TM]\ncontroller programs based on the Open-R SDK (see\nFig 5) 5) - Your own robot: The Webots [TM] user guide explains\nhow to build your own Webots [TM] cross-compilation\nsystem for your very own robot - Your own robot: The Webots [TM] user guide explains\nhow to build your own Webots [TM] cross-compilation\nsystem for your very own robot **8 **8 ** **Documentation and support**\n\nWebots [TM] comes with a complete documentation,\nincluding two printed manuals with color covers This\ndocumentation is also included on the Webots [TM] CD\nROM in both PDF and HTML format 41\n\n\nThe Webots [TM] user guide explains how to install and get\nstarted with Webots [TM] This manual includes a step-bystep tutorial for modelling and programming your own\nrobot, and describes a number of sample experiments\nincluded on the CD-ROM It explains the basic principles\nof Webots [TM] and shows you how to transfer your\nprograms to real robots The Webots [TM] reference manual contains everything you\nneed to develop your Webots [TM] application It provides a\ncomplete description of all the objects you can simulate\nwith Webots [TM], including robot bases, sensors, actuators,\nsimple objects, etc The programming interface is\ncompletely documented with examples Functions are\nsorted by categories",
    "Functions are\nsorted by categories Finally a number of example worlds and controllers are\nprovided on the CD-ROM which can serve as a starting\npoint for developing your application Webots [TM] users take advantage of the Webots [TM] users\ncommunity through a support mailing list Most\nquestions are answered within 24 hours by Cyberbotics\nsupport services All Webots [TM] licenses include one year\nof personalized user support and free upgrades via the\nInternet **9 **9 ** **Examples of Applications**\n\nWebots [TM] has been used by more than one hundred\nuniversities and research centers worldwide since 1998\n\n\nFig ** **Examples of Applications**\n\nWebots [TM] has been used by more than one hundred\nuniversities and research centers worldwide since 1998\n\n\nFig 7 7 Multi-agent robot soccer simulation\n\n\nfor both education and research purposes Education applications allow the students to get started\nwith robotics, 3D modelling, programming, artificial\nintelligence, computer vision, artificial life, etc with an\nintegrated tool It is easy to implement a virtual robot\ncontest, like a soccer contest or a humanoid locomotion\ncontest, based on Webots [TM], which is highly motivating\nfor the students All the articles listed in the last section of this paper refer\nto different research applications of Webots [TM] It would\n\n\n42\n\n\n\nbe out the scope of this paper to present each application However, we may attempt to classify them into several\nmajor categories:\n\n- The multi-agent simulations category includes\nresearch experiments where several robots cooperate\nto reach a global goal (see Fig 7) - The artificial intelligence category attempts to\nvalidate psychology hypothesis, mainly learning, by\nsimulating intelligent mobile robot behaviors - The control research category involves developing\nefficient control algorithms to perform complex\nmobile robot motion - The robot design category aims at shaping mobile\nrobots defining the position and properties of its\nsensors and actuators This is especially useful to\ninvestigate new wheeled, legged or flying robots **10 ** **References**\n\nDautenhahn, K",
    "** **References**\n\nDautenhahn, K & Coles, S J (2001) Narrative\nIntelligence from the Bottom Up: A Computational\nFramework for the Study of Story-Telling in\nAutonomous Agents _Journal of Artificial Societies_\n_and Social Simulation_ Vol 4, No 1 2001 Hayes, A T ; Martinoli, A & Goodman, R M (2003) (2003) Swarm robotic odor locatization: Off-line\noptimization and validation with real robots _Robotica_, Vol 21, pp 427-441, Cambridge\nUniversity Press Ijspeert, A J ; Martinoli, A ; Billard, A & Gambardella,\nL M (2001) (2001) Collaboration through the exploitation\nof local interactions in autonomous collective\nrobotics: the stick pulling experiment _Autonomous_\n_Robots_ Vol 11, No 2, 2001, pp 149-171 Köse, H & Akin, H L (2000) (2000) Towards a Robust\nCognitive Architecture for Small Autonomous\nMobile Robots ISCIS XV, The Fifteenth\nInternational Symposium on Computer and\nInformation Sciences, October, 11-13, 2000,\nISTANBUL, TURKEY, pp 447-455 Mitrovic, I & Dautenhahn, K (2003) Social Attitudes:\nInvestigations with Agent Simulations Using\nWebots _Journal of Artificial Societies and Social_\n_Simulation_ Vol 6, No 4 2003 Wang, L F ; Tan, K C & Prahald, V (2000) Developing Khepera Robot Applications in a Webots\nEnvironment Proceedings of the International\nSymposium on Human Micromechatronics and\nHuman Science, October 22-25, Nagoya, Japan, pp\n71-76 Proceedings of the International\nSymposium on Human Micromechatronics and\nHuman Science, October 22-25, Nagoya, Japan, pp\n71-76 Zhang, Y ; Martinoli, A ; Antonsson, E K & Olney, R (2003) Evolution of Sensory Configurations for\nIntelligent Vehicles Proceedings of the IEEE\nIntelligent Vehicles Symp , June 2003, Columbus,\npp 351-356 Zufferey, J C ; Beyeler, A & Floreano, D (2003) Vision-based Navigation from Wheels to Wings In\nProceedings of the IEEE/RSJ International\nConference on Intelligent Robots and Systems\n(IROS), Las Vegas, USA, pp In\nProceedings of the IEEE/RSJ International\nConference on Intelligent Robots and Systems\n(IROS), Las Vegas, USA, pp 2968-2973"
  ]
}