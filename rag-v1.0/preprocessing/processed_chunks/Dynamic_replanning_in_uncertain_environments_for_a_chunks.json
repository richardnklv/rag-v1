{
  "filename": "Dynamic_replanning_in_uncertain_environments_for_a.pdf",
  "text_length": 26337,
  "chunk_count": 11,
  "chunks": [
    "_Adria, O ; Streich, H & Hertzberg, J / Dynamic replanning in uncertain environmentsfor a sewer inspection robot, pp _\n_33-38, Inernational Journal of Advanced Robotic Systems, Volume 1 Number 1 (2004),_\n_ISSN 1729-8806_\n\n# **Dynamic replanning in uncertain environments** **for a sewer inspection robot**\n\n\n**Oliver Adria** **[1]** **; Hermann Streich** **[2]** **; Joachim Hertzberg** **[3]**\n1,2,3 Fraunhofer Institute for Autonomous Intelligent Systems,\nSankt Augustin, Germany\ne-mail : [first name] [last name]@ais fraunhofer de\n\n\n_**Abstract :**_ _The sewer inspection robot MAKRO is an autonomous multi-segment robot with worm-like shape driven by_\n_wheels It is currently under development in the project MAKRO-PLUS The robot has to navigate autonomously within_\n_sewer systems Its first tasks will be to take water probes, analyze it onboard, and measure positions of manholes and_\n_pipes to detect polluted-loaded sewage and to improve current maps of sewer systems One of the challenging problems_\n_is the controller software, which should enable the robot to navigate in the sewer system and perform the inspection_\n_tasks autonomously, not inflicting any self-damage This paper focuses on the route planning and replanning aspect of_\n_the robot The robot’s software has four different levels, of which the planning system is the highest level, and the_\n_remaining three are controller levels each with a different degree of abstraction The planner coordinates the sequence_\n_of actions that are to be successively executed by the robot _\n_**Keywords :**_ _autonomous, sewer inspection, AI planning, software_\n\n\n\n**1 Introduction**\n\nGermany’s sewers have a total length of more than\n400,000 km and have been continuously extended over\nthe last decades All sewers are required to be inspected\nperiodically by the municipalities Currently, inspection is\ndone by a human operator, controlling a cable driven\nrobot which carries a video camera Many such systems\nare on the market and currently in use all over the world,\ne g (IBAK), (Aries), (Gejos) MAKRO (Rome, E et al , 1999) is an articulated\ninspection robot of worm-like shape and is designed for\nautonomous navigation in sewer pipes of 30 to 60 cm\nwidth Its case design, consisting of six segments\nconnected by five motor-driven active joints, allows for\nsimultaneously climbing a step and turning, e g , at a\njunction consisting of a 600 millimeter pipe and a\nbranching 300 millimeter pipe with equal top levels\n(Kepplin, V et al , 1999)",
    ", 1999) MAKRO's autonomy and its\nkinematical abilities extend its potential mission range\nenormously, compared to conventional inspection\nequipment that is limited by cable and poor kinematics MAKRO carries all the needed resources on-board Standard NiCad batteries provide the power for its 21\nmotors, the sensors, and the electronics, including an\nindustry standard PC/104+ computer system and seven\nmicrocontrollers, allowing for an uptime of about two\nhours A prototype (MAKRO 1 1, see figure 1) of the\nrobot has been built and is currently used for various\nexperiments In the new project MAKRO-PLUS a new\nrobot is under development, which shall move in “in use”\n\n\n\nsewer systems Two application modules are under\ndevelopment for MAKRO-PLUS: One for exact\nmeasuring purposes of manholes and pipes and another\nmodule for on-board water analysis Fig 1 MAKRO 1 1\n\nsimultaneously climbing a step and turning, e g g , at a\n\nThis paper focuses on the planning and re-planning\n\njunction consisting of a 600 millimeter pipe and a\n\nsystem of the robot Dynamic re-planning is necessary\n\nbranching 300 millimeter pipe with equal top levels\n\nbecause at any time during execution of its tasks, the\n\n(Kepplin, V et al , 1999) MAKRO's autonomy and its\n\nrobot might unexpectedly run into problems So to\n\nkinematical abilities extend its potential mission range\nenormously, compared to conventional inspection achieve autonomy, the robot has to react to these\n\nsituations On encountering problems it either a) tries to\n\nequipment that is limited by cable and poor kinematics MAKRO carries all the needed resources on-board complete as many tasks as possible from its tasks list or\n\nb) goes to a safety point, where it can be safely\n\nStandard NiCad batteries provide the power for its 21\n\nrecovered by a human operator motors, the sensors, and the electronics, including an\n\nThe next chapter will first give an introduction on the\n\nindustry standard PC/104+ computer system and seven\n\nrobot, its mechanical and electronical features What\n\nmicrocontrollers, allowing for an uptime of about two\n\nfollows is a short overview of the robot controller\n\nhours A prototype (MAKRO 1 1, see figure 1) of the\n\nsoftware approach Then we give details on the\n\nrobot has been built and is currently used for various\n\nworkings of the planning system used in the robot At\n\nexperiments In the new project MAKRO-PLUS a new\n\nthe end we present a sample mission, then the status of\n\nrobot is under development, which shall move in “in use”\n\nour current work The project MAKRO-PLUS has been partially supported by the German\nFederal Ministry of Research and Technology (BMBF, No 02WK0259), project partners being rhenag, FZI, FZK, and Inspector\n\n33\n\nSystem Rainer Hitzel 33\n\n\n**2 The Robot**\n\n_2 1 Application Area_\nThe robot should be able to navigate autonomously in\nsewer pipe systems, and able to climb up and down steps\nup to 30 cm high It has to find and identify manholes\nand junctions, must be able to turn within manholes up to\n90 degrees The surface of pipes may be slippery and\nobstacles like ingrown roots or parts from damaged pipes\nmay block the robot’s path Since recovering the robot\nfrom the middle of a long pipe is very expensive and\nimpractical, the robot should always be able to navigate\nitself to a manhole from which it can be recovered, even\nin critical situations Remote operation by radio link\nwithin a sewer pipe is not possible due to high signal\ndamping and severe constraints on feasible antenna\ngeometries If the robot can no longer move, it should\nsend out signals in order to be localized A sewer system is a highly structured environment It\nconsists of very few types of objects, namely pipes and\nmanholes Pipes mainly differ in length and diameter\n(and material, which fortunately is not important for the\nsoftware - after we did some tests on different surfaces\nwe discovered that the robot has no difficulty driving on\ndifferent types of surfaces) Manholes differ in the\nnumber of pipes which lets the water in and out, and the\ngeometry The most important characteristic is the\ndifferent heights of pipes, resulting in steps the robot has\nto climb In most industrial countries, sewer system measurements\nare stored in special databases (sewer information\nsystems) The angles of the different pipe connections\nand other important data are stored here, so the robot\ndoesn’t have to roam in an unknown environment but\nuses the stored data to complete its tasks",
    "The angles of the different pipe connections\nand other important data are stored here, so the robot\ndoesn’t have to roam in an unknown environment but\nuses the stored data to complete its tasks _2 2 Mechanical features_\nEach MAKRO segment is propelled by a motor that\ndrives a two-wheeled axis, and each joint connecting two\nsegments contains three motors that allow for rotations\naround the three axes in space The joint motors are\nstrong enough to lift two segments of MAKRO's 50\nkilograms heavy, 2 meters long body, which is necessary\nfor climbing steps at some pipe junctions Since it is\nimpossible to do a 180 degree turn inside a pipe and the\nrobot is required to move backwards if its path is\nblocked, the robot is built symmetrically with identical\nhead segments on both ends so it can effortlessly change\nfrom a forward to a backward direction and vice versa _2 3 Electronics_\nIn total seven microcontrollers and a PC104-computer\nwith a 6 5 GB hard disk, frame grabber and Wireless\nLAN Ethernet interface are on-board All processors\ncommunicate via CAN-Bus Each joint has three infrared\nangle decoders Each segment has odometers for the\nwheels The robot also has a temperature sensor for the\nPC104 unit In each head four infrared sensors are used\nfor distance measurement to the sides, up and down An\n\n\n34\n\n\n\nultrasonic sensor detects obstacles in the frontal\n\ndirection Two inclinometers in each head show the\nvertical position of the robot A laser-cross/camerasensor on each head projects a laser cross into the pipe\n(Kolesnik, M & Streich, H , 2002) The processing of\nthe grabbed camera image computes the horizontal angle\nof the robot’s head relative to the axis of the pipe Two of\nthe robot’s segments contain NiCad Batteries, which\nenables the robot to move for about two hours To\nlocalize the robot if it’s unable to move anymore, a signal\ntransmitter is on board, which is activated when deemed\n\nnecessary",
    "To\nlocalize the robot if it’s unable to move anymore, a signal\ntransmitter is on board, which is activated when deemed\n\nnecessary **3 Software Approach**\n\n_3 1 Introduction_\nWe decided to organize the mission control software in\ndifferent degrees of abstraction The problem was to find\na suitable granularity between complex inspection orders\n(missions) and simple subtasks (e g checking a single\ninfrared sensor), alternatives consisting of partitioning\nthe problem into manageable units, finding terms and\nabstractions for semantically related aspects The result is\na software package which consists of four different levels\n(see figure 2), which is tailored to the application,\nnamely to autonomously control the sewer inspection\nrobot MAKRO Fig 2 Our 4-Level Software Approach\n\n\n_3 2 Overview and Execution Model_\nThe robot’s mission is specified by a human operator\nwho determines where the robot is entered in the sewer\nsystem, what inspection tasks the robot has to do at\nwhich locations, and where the robot shall be recovered\nafter the inspection tasks have been accomplished This\nmission data is transmitted to the robot before the robot\n\nis entered into a manhole As additional information the\nrobot keeps a database, which includes the geometrical\ndata of all pipes and manholes in the inspection area It is simple to specify the path the robot has to drive if we\nhave a map So, we decided to model the world\ntopologically, consisting of manholes and pipes and\nspecial locations (inspection points, e g for water\nsamples), and then we define some pre-set actions (e g moving from Point A to inspection point P) A good AI\nplanning algorithm should be able to generate a sequence\nof actions so that the robot will reach its specified goals The highest level of the 4 software levels used by the\nrobot is the Planner Level This level generates a\nsequence of actions that are then successively executed\nby the next lower level The lower 3 levels of the software approach are\ncontroller levels with different degrees of abstraction Execution of the first tasks begins when the Planner level\nfinds a solution and generates a symbolic plan This plan\nconsists of a sequence of actions that are recognized by\nthe next lower level: The Action Controller An action is\na function that might look like “DriveToManhole\n(direction, distance, type, size, speed …)” In case\nsomething goes wrong, e g",
    "g there is an obstacle blocking\nthe path of the robot, the Action Controller will respond\nto this by sending out the appropriate response/error code\nto the Planner, and the Planner can respond accordingly,\ndepending on the type of error response the Action\nController has sent The planner might re-route the robot\nto another path or just send it to the next available\nmanhole for immediate recovery The Action Controller\ndiscriminates three types of errors: Blockage (the robot’s\npath is blocked), danger (robot is in a position where it\ncan damage itself and thus might become immobile) and\nmalfunction (software or hardware error) In case of\nmalfunction we might lose partial control of the robot, so\nthe recovery scheme is for the robot to reboot itself and\nhope that the fault was temporary, so the robot can\ncontinue its mission An action itself consists of smaller operations, specified\nas “jobs” Jobs are implemented one level below the\nAction Controller level: “Base Machine” The Base Machine sequentially executes its jobs, just like\nthe Action Controller executes its actions If the Base\nMachine should have trouble executing any of its jobs,\nan error command will be sent to the Action Controller,\nand the Action Controller will react accordingly A job is\na simple operation which might look like: “DriveForward\n(speed, distance)” The 4th and lowest level of the software is the Low\nLevel Controller This is the interface to all sensors and\n\nactuators in the robot These are accessible via CAN-bus\nand are directly connected to the microcontrollers The\n\n\n35\n\n\n\nlow-level controller is provided by our project partner\nFZI It runs distributedly on the seven microcontrollers of\nthe robot **4 The (Re-)Planning System**\n\n_4 1 Overview_\nIn the following we will use the word “Planner” or\n“Planning System” when referring to the planning system\nimplemented in the robot (see figure 3) The AI Planner\nthat is integrated in the Planning System is referred to as\n“AI planner” or “planning algorithm” |Planner<br>user input internal database<br>data structures<br>status<br>info,<br>world<br>feedback<br>goal model<br>from<br>robot<br>controller<br>for re-<br>AI<br>planning<br>planner<br>symbolic plan<br>fusion of<br>parameters<br>action sequence with<br>parameters|Col2|Col3|\n|---|---|---|\n||||\n|Action Controller|Action Controller|Action Controller|\n\n\nFig 3 Planning System Software Architecture\n\nThe Planning System of the robot needs two inputs These are 1) user input for the goals and the specific\ntasks that are to be completed and 2) the internal database\nof the sewer where the robot will be working in The\ninternal database is then parsed into data structures and\nthrough the data structure we create a world model The\nworld model and the set tasks/goals are then fed into the\nAI planner The output is a symbolic plan of the robot’s\ntasks This symbolic plan has no quantitative values so it\n\n\nhas to be fused with the data structures to get the\nparameters needed This ‘fused plan’ is a sequence of\nactions; these are fed into the Action Controller which\nexecutes them successively If an error occurs, the Action\nController will inform the Planning System, and the\nPlanning System will react accordingly by changing the\nworld model and the robot’s goals to create a new plan\nthat has been adapted to the modified world model/task\nlist _4 2 Internal database and data structures_\nThe data we need is stored in a sewer database system\n( _Kanalinformationssystem,_ KIS) These databases\ncontain data on the pipes and manholes e g unique id\nnumber, sizes, connections, coordinates, last date of\ninspection, type of inspection, just to name a few Much\nof this data is not really needed by the robot, so we need\nto parse this data into the internal database format that\nthe robot understands The current internal database used in MAKRO’s\nPlanning System is an ASCII text We set the format\nourselves; it includes the manhole’s diameter,\nconnections and the gross connection angles between the\ndifferent pipes The pipe info stored is the length and the\ndiameter The ASCII text/database is then subsequently\nparsed into C++ data structures for easier processing",
    "The ASCII text/database is then subsequently\nparsed into C++ data structures for easier processing _4 3 User Input_\nThe user has to input the goals and the specific tasks\nwhich need to be completed by the robot There are 3\ndifferent tasks that the robot can execute These are 1) go\nto a specified point in the sewer system, 2) scan/inspect\narea and 3) get water sample This is all that is needed In order for the user to input, the user will see a 2-D\nrepresentation of the sewer system on a PDA (personal\ndigital assistant) and can then click on the spots where\nthe tasks need to be done in the sewer When user input\nand database information is received, the robot is on its\nown and starts working autonomously _4 4 World model and goals_\nThe world model and goals need to be understood by the\nAI Planner There is a standard syntax that was set for the\nInternational Planning Competition (IPC) called PDDL\n(Ghallab, M et al , 1998) So goals and world model are\nparsed to the correct syntax of PDDL since this is the\nsyntax understood by the AI planner used in the robot’s\nPlanning System _4 5 The AI Planner and the output (symbolic plan)_\nThe AI planner first parses the world model and goals\nbefore calculating a route for the robot The output is\na sequence of actions written as ASCII text into a\nsolution file These actions have no quantitative values\nand contain only manhole and pipe IDs Two of these\nactions might look like:\n\nDRIVE_MANHOLE_TYPE_4_FROM_3_TO_4 M6 P10 P4 P5 P6\nTAKE_WATER_SAMPLE P6\n\nwhere the M i denote manholes and the P i pipes 36\n\n\n\n_4 6 Fusion of parameters_\nSo in order for the robot to work with parameters, the\nsymbolic plan and the actions with the manhole and pipe\nIDs have to be ‘fused/matched’ with the data structures These actions with parameters are then fed sequentially\nto the Action Controller The Action Controller then\nexecutes them one by one _4 7 Changing the world model and modifying goals_\nMAKRO’s main task will be to inspect pipes and\nmanholes for damages and repair necessities So it will\nbe very common that MAKRO will run into trouble\nwhile on one of its inspection tasks",
    "So it will\nbe very common that MAKRO will run into trouble\nwhile on one of its inspection tasks E g an obstacle\nmight be blocking the path in one of the pipes In this\ncase, MAKRO has to react accordingly and will handle\nthis problem by replanning its route This is done by\nchanging the world model and the goals E g if the\nobstacle is in pipe P5 connecting manholes M12 and\nM17, then we can just disconnect the connection between\nM12 and M17 and then let the AI planner find a new\nroute, if one exists Consequently, some goals set by the human operator\nmight not be achievable anymore because of this blocked\npath So we also need to modify the goals that are to be\naccomplished We then try to tick off the highest possible number of\ngoals from the goals list If the pre-set exit point cannot\nbe reached anymore, the robot will have to find a new\nexit point, e If the pre-set exit point cannot\nbe reached anymore, the robot will have to find a new\nexit point, e g , the next available manhole **5 Third party software**\n\nThe AI planning algorithm used in the robot is from the\nFF planner version 2 3 (Hoffmann, J & Nebel, B , 2001) , 2001) FF is a forward chaining heuristic state space planner We decided to go with the FF planner because it showed\ngood results in the IPC 2002; it is coded in C (small\noverhead) and is relatively small in size At the current\nstate, the AI planning algorithm is a standalone program\nwhich the robot’s planner calls by system call The\nresults are written to a file and then parsed",
    "The\nresults are written to a file and then parsed MCA2 (Modular Controller Architecture) (Scholl, K et\nal , 2001) is a C++-based framework for use in robots\nand other hardware It simplifies the coding and\ndebugging process tremendously and gives better\nstructure to the overall program; it is network-transparent\nand gives us real-time capability without much extra\neffort, letting us focus on the actual code content and\nrobot functionality MCA2 is used throughout the whole\nrobot from the low-level-controls up to the Planning\nSystem A part of the robot controller is implemented in sE\n(synERJY) (Budde, R & Poigné, A , 2000), a\nsynchronous programming language developed at our\ninstitute We used sE because of its support for building\nhierarchical finite state automata Communication is\ndone via signals on a virtual “bus” concept The sE\ncompiler detects race conditions on valued signals, which\neliminates difficult to find software faults The sE\ncompiler detects race conditions on valued signals, which\neliminates difficult to find software faults **6 **6 Experiments and an example**\n\nAt our institute we have a concrete test environment\nabove ground We created an internal database based on\nthis sewer system Each pipe and each manhole has a\nunique number The mission is defined (by the human\noperator) by specifying the starting point, the end point,\nand inspection tasks (e g g get a water sample from a\nspecific location) get a water sample from a\nspecific location) In the example shown in figure 4, the\nrobot first drives along line 1 It gets a water sample and\nanalyzes it Then the robot drives to the next goal point\nand makes an inspection and then drives to the exit\nmanhole, where the robot is recovered Fig 4 Test environment at Fraunhofer AIS\n\nThe resulting symbolic plan related to figure 4 is as\nfollows:\n\nDRIVE_PIPE_TO_MANHOLE P12 M2\nDRIVE_MANHOLE_TYPE_2_FROM_1_TO_2 M2 P12 P1\nDRIVE_PIPE_TO_MANHOLE P1 M3\nDRIVE_MANHOLE_TYPE_3_TYPE_B_FROM_3_TO_1 M3 P5 P2 P1\nDRIVE_PIPE_TO_MANHOLE P5 M6\nDRIVE_MANHOLE_TYPE_4_FROM_3_TO_4 M6 P10 P4 P5 P6\nTAKE_WATER_SAMPLE P6\nDRIVE_PIPE_TO_MANHOLE P6 M6\nDRIVE_MANHOLE_TYPE_4_FROM_4_TO_2 M6 P10 P4 P5 P6\nDRIVE_PIPE_TO_MANHOLE P4 M5\nINSPECT_PIPE P4\nDRIVE_MANHOLE_TYPE_4_FROM_4_TO_1 M5 P8 P13 P3 P4\nDRIVE_PIPE_TO_MANHOLE P8 M9\nDRIVE_MANHOLE_TYPE_3_TYPE_B_FROM_1_TO_2 M9 P8 P9 P14\n\nThe execution of this mission has been successfully\ntested in our simulation (Neuhoefer, J , 2003)",
    ", 2003) In addition\nto fault-free execution, we also test the behavior if an\nobstacle is blocking the robot’s path In this situation the\nresponsible recovery module will first drive the robot\nseveral centimeters backwards Then the action of\ndriving forward is retried (phase 1 of the recovery) If the\nsame blockage problem persists, the robot will\ntemporarily lift its head (if possible), hoping the obstacle\nwill somehow disappear (phase 2), e If the\nsame blockage problem persists, the robot will\ntemporarily lift its head (if possible), hoping the obstacle\nwill somehow disappear (phase 2), e g if it was some\nsort of light waste which did not really obstruct and got\nflushed away when the robot lifted its head If that\ndoesn’t work, MAKRO tries to push the obstacle out of\nits way by just driving forward (phase 3) Although this\nworks without any problems in the simulation it is very\nrisky in the real sewer, because it might be possible that\nthe obstruction moves a little and then gets stuck between\n\n\n37\n\n\n\ntwo segments of the robot In such delicate cases we will\nfirst move the robot safely backward to the next\nreachable manhole, where it can be recovered Within the real test-environment the robot behaves in the\nsame way like in the simulation Manholes and junctions\nare detected and verified reliably Turns up to 90 degrees\ncan be driven without trouble Turns up to 90 degrees\ncan be driven without trouble Figure 5 shows MAKRO\n1 1 in the test-environment at our institute, driving trough\na manhole in 60 cm diameter pipes",
    "1 in the test-environment at our institute, driving trough\na manhole in 60 cm diameter pipes Fig 5 MAKRO 1 1 turning in AIS test environemt\n\nMAKRO 1 1 is the second prototype we developed It is\nwater proofed and can be used in dry-weather conditions\nin real sewage systems We made tests in Siegburg, a\ntown near the institute, in the sewer system managed by\nour project partner Rhenag There we tested the handling\nof entering and recovering the robot in manholes In\naddition we did tests on the remote control possibilities\nvia Wireless LAN Ethernet It is possible to\ncommunicate with the robot if the robot is up to 2 m\ninside the pipe This is more than enough for giving\nexecution commands when we are entering and\nretrieving the robot in manholes and giving the ‘go’\nsignal for starting a mission **7 Summary and current state**\n\nIn this paper we described the software approach in\ngeneral and the Planning System for the sewer inspection\nrobot MAKRO Summary and current state**\n\nIn this paper we described the software approach in\ngeneral and the Planning System for the sewer inspection\nrobot MAKRO Different degrees of abstractions have\nbeen defined, which leads to an understandable and\nextendable structure Different degrees of abstractions have\nbeen defined, which leads to an understandable and\nextendable structure MAKRO 1 1 is the prototype for\nMAKRO PLUS All the current software tests are based\nand tested on MAKRO 1 1 The underlying concepts of\nthe robots are identical, but MAKRO PLUS will be water\nand explosion proof, and will have two special\napplication segments for inspection tasks The robot will\nbe up to twice as fast (maximum of 60cm/sec), the\nelectronic hardware used (processor, hard disk) is more\nadvanced and powerful The battery also lasts longer,\nnow able to give power twice as long At the moment,\nthe mechanical design and the electronic configuration of\nthe robot are at its final stages and a couple of the robot\nmodules are almost finished Most parts of the software are running and integrated",
    "Most parts of the software are running and integrated A\nsecond laser/cam sensor using structured light for\n\n\nobstacle classification and manhole verification is under\ndevelopment The Planning System development is in its final stages\nand nearly finished Once the interface between the\nPlanning System and the Action Controller is working\nwithout software glitches, the next step is to create a user\nfriendly interface Then the only thing needed is an\nautomated conversion of the data from the huge German\nsewer database to the internal database needed for the\nrobot, and MAKRO should be fully automated **4 **4 References**\n\nAries Industries, USA, http://www ariesind com/,\nAccessed 2003-12-27\nBudde, R ; Poigné, A ; Poigné, A (2000) Reactive Control with\nSimple Synchronous Models, In : Languages,\nCompilers, and Tools for Embedded Systems, ACM\nSIGPLAN Workshop LCTES 2000, Vancouver,\nCanada, Proceedings\nGejos, Germany, http://www gejos de/, Accessed 200312-27\nGhallab, M ; Howe, A ; Knoblock, C ; McDermott, D ;\nRam, A ; Veloso, M ; Weld, D ; and Wilkins, D (1998) PDDL---The Planning Domain Definition\nLanguage AIPS-98 Planning Committee\n\n\n38\n\n\n\nHoffmann, J ; Nebel, B (2001) (2001) The FF Planning\nSystem: Fast Plan Generation Through Heuristic\nSearch, in: Journal of Artificial Intelligence Research,\nVolume 14, Pages 253 - 302 Kepplin, V ; Scholl, K -U & Berns, K (1999) A\nmechatronic concept for a sewer inspection robot A\nmechatronic concept for a sewer inspection robot In:\nProc IEEE/ASME International Conference on\nAdvanced Intelligent Mechatronics (AIM'99) p 724–\n729, IEEE Press, Piscataway, NJ\nKolesnik, M & Streich, H (2002) „Visual Orientation\nand Motion Control of MAKRO - Adaptation to the\nSewer Environment” „Visual Orientation\nand Motion Control of MAKRO - Adaptation to the\nSewer Environment” In: B Hallam, D Floreano, J Hallam, and J -A Meyer (eds ) From animals to\nanimats 7 Proc of the 7th Int Conf on Simulation of\nAdaptive Behavior on Simulation of\nAdaptive Behavior Cambridge, Mass : MIT Press,\n62-69 Neuhoefer, J (2003) Real-Time Simulation of an\nInspection Robot with a Commercial Physics Engine,\nIn: Industrial Simulation Conference 2003 / Guerri,\nJuan Carlos[Hrsg ], p 375 - 379\nRome, E ; Hertzberg, J ; Kirchner, F ; Licht, U ; Streich,\nH & Christaller, Th , (1999) Towards Autonomous\nSewer Robots: the MAKRO Project, Urban Water 1,\np 57-70\nScholl, K -U ; Albiez, J ; Gassmann, B (2001) MCA –\nAn Expandable Modular Controller Architecture, 3rd\nReal-Time Linux Workshop, Milano, Italy synERJY SE: http://borneo gmd de/~ap/sE/index html,\nAccessed 2003-12-27"
  ]
}